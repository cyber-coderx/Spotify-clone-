/your-project/
│
├── public/                      # Only public files exposed to browser
│   ├── index.php                # Entry point (router / page switcher)
│   └── assets/                  # Static assets (CSS, JS, images)
│
├── pages/                       # Page templates
│   ├── login_signup.php
│   ├── signup-continue.php
│   ├── dashboard.php            # Requires authentication
│   └── loading.html
│
├── controllers/                 # Application logic
│   └── AuthController.php       # Handles login/signup/logout
│
├── includes/                    # Shared logic
│   ├── db.php                   # Secure PDO connection
│   ├── session.php              # Session protection

│
├── helpers/                     # Utility logic
│   └── Recaptcha.php            # reCAPTCHA helper
│
├── config/                      # Environment variables, secrets
    └── config.php               # DB credentials, reCAPTCHA keys







<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <title>Spotify Multi-Step Signup</title>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    rel="stylesheet"
  />
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Spotify+Circular&display=swap");
    /* Common styles for all steps */
    body {
      font-family: "Spotify Circular", system-ui, -apple-system,
        BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,
        "Open Sans", "Helvetica Neue", sans-serif;
      background-color: #121212;
      color: white;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 384px;
      width: 100%;
      margin: 3rem auto 0;
      padding: 0 1.5rem;
      box-sizing: border-box;
      position: relative;
    }
    .logo-container {
      display: flex;
      justify-content: center;
      margin-bottom: 1.5rem;
    }
    .logo-container img {
      width: 32px;
      height: 32px;
      object-fit: contain;
    }
    .progress-bar-container {
      position: relative;
      height: 2px;
      margin-bottom: 1.5rem;
      border-radius: 9999px;
      background-color: #4b5563; /* gray-600 */
      overflow: hidden;
    }
    .progress-bar-fill {
      position: absolute;
      top: 0;
      left: 0;
      height: 2px;
      background-color: #22c55e; /* green-500 */
      border-radius: 9999px;
      width: 20%;
      pointer-events: none;
      transition: width 0.3s ease;
    }
    .header {
      position: relative;
      margin-bottom: 1.5rem;
      padding-left: 2rem;
    }
    .back-button {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      color: #9ca3af; /* gray-400 */
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1rem;
      transition: color 0.2s;
      z-index: 10;
    }
    .back-button:hover {
      color: white;
    }
    .back-button[disabled] {
      cursor: default;
      color: #4b5563;
      pointer-events: none;
    }
    .step-text {
      margin: 0 0 0.25rem 0;
      font-size: 0.875rem;
      font-weight: 600;
      color: #9ca3af; /* gray-400 */
    }
    .title {
      margin: 0;
      font-weight: 700;
      font-size: 1rem;
      color: white;
    }
    /* Step containers */
    .step {
      display: none;
    }
    .step.active {
      display: block;
    }
    /* Step 1 styles */
    form.step-1-form label {
      display: block;
      font-size: 0.75rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    .input-wrapper {
      position: relative;
      margin-bottom: 1rem;
    }
    input[type="password"],
    input[type="text"] {
      width: 100%;
      background-color: #121212;
      border: 1px solid #374151; /* gray-700 */
      border-radius: 0.375rem;
      padding: 0.5rem 2.5rem 0.5rem 0.75rem;
      font-size: 0.875rem;
      color: white;
      box-sizing: border-box;
      font-family: inherit;
      letter-spacing: normal;
    }
    input::placeholder {
      color: #6b7280; /* gray-500 */
    }
    input:focus {
      outline: none;
      border-color: #22c55e; /* green-600 */
    }
    .toggle-password-btn {
      position: absolute;
      right: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #6b7280; /* gray-500 */
      cursor: pointer;
      font-size: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: color 0.2s;
      padding: 0;
      line-height: 1;
    }
    .toggle-password-btn:hover {
      color: #9ca3af; /* gray-400 */
    }
    ul.password-requirements {
      list-style: none;
      padding: 0;
      margin: 0 0 1.5rem 0;
      font-size: 0.75rem;
      color: #9ca3af; /* gray-400 */
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
      max-width: 384px;
      width: 100%;
      box-sizing: border-box;
      padding: 0 1.5rem;
    }
    ul.password-requirements li {
      display: flex;
      align-items: center;
    }
    ul.password-requirements li i {
      color: #9ca3af; /* default gray-400 */
      margin-right: 0.5rem;
      font-size: 10px;
      flex-shrink: 0;
      transition: color 0.2s;
    }
    ul.password-requirements li.valid i {
      color: #22c55e; /* green-500 */
    }
    button#nextBtn {
      width: 100%;
      background-color: #22c55e;
      color: black;
      font-weight: 700;
      font-size: 0.75rem;
      border-radius: 9999px;
      padding: 0.5rem 0;
      border: none;
      cursor: pointer;
      transition: background-color 0.2s;
      user-select: none;
      box-sizing: border-box;
      display: block;
      margin-top: 0;
    }
    button#nextBtn:hover:not(:disabled) {
      background-color: #16a34a;
    }
    button#nextBtn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    /* Step 2 styles */
    form.step-2-form label {
      display: block;
      font-size: 0.75rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    .small-text {
      color: #9ca3af;
      font-size: 0.625rem;
      margin-top: 0;
      margin-bottom: 0.5rem;
    }
    .input-full {
      width: 100%;
      background-color: #121212;
      border: 1px solid #374151; /* gray-700 */
      border-radius: 0.375rem;
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
      color: white;
      box-sizing: border-box;
      margin-bottom: 1rem;
    }
    .dob-container {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    .dob-day,
    .dob-month,
    .dob-year {
      background-color: #121212;
      border: 1px solid #374151;
      border-radius: 0.375rem;
      color: white;
      font-size: 0.875rem;
      padding: 0.5rem 0.75rem;
      box-sizing: border-box;
      outline: none;
    }
    .dob-day {
      width: 56px;
    }
    .dob-month {
      width: 112px;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-image:
        url("data:image/svg+xml;charset=UTF-8,%3csvg fill='white' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1rem;
      cursor: pointer;
    }
    .dob-year {
      width: 80px;
    }
    .dob-day:focus,
    .dob-month:focus,
    .dob-year:focus {
      border-color: #22c55e;
    }
    .gender-container {
      margin-bottom: 0.5rem;
    }
    .gender-text {
      color: #9ca3af;
      font-size: 0.625rem;
      margin-bottom: 0.5rem;
    }
    .radio-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 0.5rem;
      font-size: 0.75rem;
    }
    .radio-group label {
      font-weight: 400;
      cursor: pointer;
    }
    input[type="radio"] {
      width: 16px;
      height: 16px;
      accent-color: #22c55e;
      cursor: pointer;
      background-color: transparent;
      border: 1px solid #4b5563;
      border-radius: 50%;
      margin: 0;
    }
    input[type="radio"] + label {
      color: white;
    }
    form.step-2-form button[type="submit"] {
      width: 100%;
      background-color: #22c55e;
      color: black;
      font-weight: 700;
      font-size: 0.75rem;
      border-radius: 9999px;
      padding: 0.5rem 0;
      border: none;
      cursor: pointer;
      transition: background-color 0.2s;
      user-select: none;
      box-sizing: border-box;
      display: block;
      margin-top: 0;
    }
    form.step-2-form button[type="submit"]:hover {
      background-color: #16a34a;
    }
    /* Step 3 styles */
    /* Removed the border-green line as requested */
    .step-3 .header {
      position: relative;
      padding-left: 2rem;
      margin-bottom: 1rem;
    }
    .step-3 .back-button {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #9ca3af;
      font-size: 1.25rem;
      cursor: pointer;
      transition: color 0.2s;
      z-index: 10;
    }
    .step-3 .back-button:hover {
      color: white;
    }
    .step-3 .step-text {
      font-size: 0.875rem;
      color: #9ca3af;
      margin: 0 0 0.25rem 0;
    }
    .step-3 .title {
      font-weight: 700;
      font-size: 1rem;
      margin: 0;
    }
    .step-3 form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .step-3 label {
      display: flex;
      align-items: flex-start;
      gap: 0.75rem;
      background-color: #282828;
      padding: 0.75rem;
      border-radius: 0.375rem;
      cursor: pointer;
      font-size: 0.75rem;
      line-height: 1.2;
      max-width: 260px;
      color: #d1d1d1;
    }
    .step-3 label input[type="checkbox"] {
      margin-top: 0.25rem;
      width: 1rem;
      height: 1rem;
      accent-color: #1db954;
      background-color: #282828;
      border: 1px solid #4b4b4b;
      border-radius: 0.25rem;
      cursor: pointer;
    }
    .step-3 label input[type="checkbox"]:focus {
      outline: 2px solid #1db954;
      outline-offset: 2px;
    }
    .step-3 p.info-text {
      font-size: 10px;
      color: #9ca3af;
      max-width: 260px;
      line-height: 1.3;
      margin-top: 1.5rem;
    }
    .step-3 p.info-text a {
      color: #1db954;
      text-decoration: underline;
    }
    .step-3 p.info-text a:hover {
      text-decoration: none;
    }
    .signup-btn {
      margin-top: 1.5rem;
      width: 260px;
      background-color: #1db954;
      color: black;
      font-weight: 700;
      font-size: 0.875rem;
      border: none;
      border-radius: 9999px;
      padding: 0.5rem 0;
      cursor: pointer;
      transition: background-color 0.2s;
      user-select: none;
    }
    .signup-btn:hover {
      background-color: #1ed760;
    }
    /* Footer common */
    footer {
      margin-top: auto;
      text-align: center;
      font-size: 9px;
      color: #6b7280; /* gray-500 */
      padding: 1rem 1.5rem;
      max-width: 384px;
      width: 100%;
      box-sizing: border-box;
    }
    footer a {
      color: #6b7280;
      text-decoration: underline;
    }
    footer a:hover {
      color: white;
    }
    /* Responsive */
    @media (max-width: 400px) {
      .container {
        margin: 2rem 1rem 0 1rem;
      }
      .step-3 {
        padding: 0 1rem;
      }
      .step-3 label {
        max-width: 100%;
      }
      .step-3 p.info-text {
        max-width: 100%;
      }
      .signup-btn {
        width: 100%;
      }
      form.step-2-form button[type="submit"] {
        width: 100%;
      }
      .signup-btn {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container" role="main">
    <div class="logo-container">
      <img
        alt="Spotify logo white circle on black background"
        src="https://storage.googleapis.com/a1aa/image/13697a89-49a5-41af-5b87-9e419f81128c.jpg"
        width="32"
        height="32"
      />
    </div>
    <div class="progress-bar-container" aria-hidden="true">
      <div class="progress-bar-fill"></div>
    </div>
    <form action="/public/index.php?action=signup-continue" method="POST" novalidate>
 
    <!-- Step 1 -->
    <div class="step step-1 active" aria-label="Step 1: Create a password" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button" disabled tabindex="-1">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 1 of 3</p>
        <h2 class="title">Create a password</h2>
      </div>
      <div class="step-1-form">
        <label for="password">Password</label>
        <div class="input-wrapper">
          <input
            id="password"
            type="password"
            aria-describedby="password-requirements"
            placeholder=""
            autocomplete="new-password"
            oninput="checkPassword(this.value)"
            required
          />
          <button
            id="togglePasswordBtn"
            class="toggle-password-btn"
            type="button"
            aria-label="Toggle password visibility"
            tabindex="-1"
          >
            <i id="togglePasswordIcon" class="fas fa-eye-slash"></i>
          </button>
        </div>
        <ul id="password-requirements" class="password-requirements" aria-label="Password requirements">
          <li id="req-letter">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            1 letter
          </li>
          <li id="req-number-special">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            1 number or special character (example: # ? ! &amp;)
          </li>
          <li id="req-characters">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            10 characters
          </li>
        </ul>
        <button id="nextBtn" type="button" disabled>Next</button>
  </div>
    </div>
  

    <!-- Step 2 -->
    <div class="step step-2" aria-label="Step 2: Personal information" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 2 of 3</p>
        <h2 class="title">Tell us about yourself</h2>
      </div>
      <div class="step-2-form">
        <label for="name">Name</label>
        <p class="small-text">This name will appear on your profile</p>
        <input
          type="text"
          id="name"
          name="name"
          class="input-full"
          autocomplete="off"
          required
        />
        <label for="dob">Date of birth</label>
        <p class="gender-text" style="margin-top: 0; margin-bottom: 0.25rem; font-size: 0.625rem;">
          Why do we need your date of birth?
          <a href="#" style="color: #9ca3af; text-decoration: underline;">Learn more.</a>
        </p>
        <div class="dob-container">
          <input
            type="text"
            id="day"
            name="day"
            maxlength="2"
            placeholder="dd"
            class="dob-day"
            autocomplete="off"
            required
            pattern="\d{1,2}"
            inputmode="numeric"
          />
          <select id="month" name="month" class="dob-month" required>
            <option disabled selected value="">Month</option>
            <option>January</option>
            <option>February</option>
            <option>March</option>
            <option>April</option>
            <option>May</option>
            <option>June</option>
            <option>July</option>
            <option>August</option>
            <option>September</option>
            <option>October</option>
            <option>November</option>
            <option>December</option>
          </select>
          <input
            type="text"
            id="year"
            name="year"
            maxlength="4"
            placeholder="yyyy"
            class="dob-year"
            autocomplete="off"
            required
            pattern="\d{4}"
            inputmode="numeric"
          />
        </div>
        <label for="gender">Gender</label>
        <p class="gender-text">
          We use your gender to help personalize our content recommendations and ads for you.
        </p>
        <div class="radio-group" role="radiogroup" aria-labelledby="gender-label">
          <input type="radio" id="man" name="gender" value="man" required />
          <label for="man" style="color:#9ca3af;">Man</label>
          <input type="radio" id="woman" name="gender" value="woman" />
          <label for="woman" style="color:#9ca3af;">Woman</label>
          <input type="radio" id="nonbinary" name="gender" value="nonbinary" />
          <label for="nonbinary" style="color:#9ca3af;">Non-binary</label>
        </div>
        <div class="radio-group" style="margin-bottom: 1.5rem;">
          <input type="radio" id="prefer-not" name="gender" value="prefer-not" />
          <label for="prefer-not" style="color:#9ca3af;">Prefer not to say</label>
        </div>
        <button type="submit" class="nextBtnStep2">Next</button>
      </div>
    </div>

    <!-- Step 3 -->
    <div class="step step-3" aria-label="Step 3: Preferences and Terms" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 3 of 3</p>
        <div class="title">Terms &amp; Conditions</div>
      </div>
      <div class="step-3-form">
        <label>
          <input type="checkbox" checked />
          I would prefer not to receive marketing messages from Spotify
        </label>
        <label>
          <input type="checkbox" />
          Share my registration data with Spotify’s content providers for marketing purposes.
        </label>
        <p class="info-text">
          By clicking on sign-up, you agree to Spotify’s
          <a href="#">Terms and Conditions of Use</a>.
        </p>
        <p class="info-text">
          To learn more about how Spotify collects, uses, shares and protects your personal data, please see
          <a href="#">Spotify’s Privacy Policy</a>.
        </p>
        <button class="signup-btn" type="submit">Sign up</button>
  </div>
    </div>
  </div>
</form>
  <footer>
    <p>
      This site is protected by reCAPTCHA and the Google
      <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer">Privacy Policy</a> and
      <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer">Terms of Service</a> apply.
    </p>
  </footer>

  <script>
    // Existing Step 1 functions (unchanged)
    function checkPassword(value) {
      const letterLi = document.getElementById("req-letter");
      const numberSpecialLi = document.getElementById("req-number-special");
      const charactersLi = document.getElementById("req-characters");
      const nextBtn = document.getElementById("nextBtn");

      const hasLetter = /[a-zA-Z]/.test(value);
      const hasNumberSpecial = /[\d#?!&]/.test(value);
      const hasCharacters = value.length >= 10;

      if (hasLetter) {
        letterLi.classList.add("valid");
        letterLi.querySelector("i").classList.remove("fa-times-circle");
        letterLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        letterLi.classList.remove("valid");
        letterLi.querySelector("i").classList.remove("fa-check-circle");
        letterLi.querySelector("i").classList.add("fa-times-circle");
      }

      if (hasNumberSpecial) {
        numberSpecialLi.classList.add("valid");
        numberSpecialLi.querySelector("i").classList.remove("fa-times-circle");
        numberSpecialLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        numberSpecialLi.classList.remove("valid");
        numberSpecialLi.querySelector("i").classList.remove("fa-check-circle");
        numberSpecialLi.querySelector("i").classList.add("fa-times-circle");
      }

      if (hasCharacters) {
        charactersLi.classList.add("valid");
        charactersLi.querySelector("i").classList.remove("fa-times-circle");
        charactersLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        charactersLi.classList.remove("valid");
        charactersLi.querySelector("i").classList.remove("fa-check-circle");
        charactersLi.querySelector("i").classList.add("fa-times-circle");
      }

      nextBtn.disabled = !(hasLetter && hasNumberSpecial && hasCharacters);
    }

    // Fix toggle password visibility to preserve input value and cursor position without re-render issues
    function togglePasswordVisibility(event) {
      event.stopPropagation();
      const passwordInput = document.getElementById("password");
      const toggleIcon = document.getElementById("togglePasswordIcon");
      const isPassword = passwordInput.type === "password";

      // Save cursor position and scroll
      const selectionStart = passwordInput.selectionStart;
      const selectionEnd = passwordInput.selectionEnd;
      const scrollTop = passwordInput.scrollTop;

      // Change input type without losing value or cursor position
      try {
        passwordInput.type = isPassword ? "text" : "password";
      } catch (e) {
        // Some browsers may throw if changing type dynamically, fallback:
        const newInput = passwordInput.cloneNode(true);
        newInput.type = isPassword ? "text" : "password";
        passwordInput.parentNode.replaceChild(newInput, passwordInput);
      }

      // Restore cursor position and scroll
      passwordInput.setSelectionRange(selectionStart, selectionEnd);
      passwordInput.scrollTop = scrollTop;
      passwordInput.focus();

      // Toggle icon
      if (isPassword) {
        toggleIcon.classList.remove("fa-eye-slash");
        toggleIcon.classList.add("fa-eye");
      } else {
        toggleIcon.classList.remove("fa-eye");
        toggleIcon.classList.add("fa-eye-slash");
      }
    }

    // Integration logic for multi-step form
    (function () {
      const steps = document.querySelectorAll(".step");
      const progressBarFill = document.querySelector(".progress-bar-fill");
      let currentStep = 0; // zero-based index

      // Update progress bar width based on step index
      function updateProgressBar(stepIndex) {
        let widthPercent = "20%";
        if (stepIndex === 0) widthPercent = "20%";
        else if (stepIndex === 1) widthPercent = "40%";
        else if (stepIndex === 2) widthPercent = "100%";
        progressBarFill.style.width = widthPercent;
      }

      // Show the step at index, hide others
      function showStep(index) {
        steps.forEach((step, i) => {
          if (i === index) {
            step.classList.add("active");
            step.setAttribute("aria-hidden", "false");
          } else {
            step.classList.remove("active");
            step.setAttribute("aria-hidden", "true");
          }
        });
        currentStep = index;
        updateProgressBar(index);
        updateHeaderBackButton();
      }

      // Enable or disable back button on step 1 (disabled)
      function updateHeaderBackButton() {
        steps.forEach((step, i) => {
          const backBtn = step.querySelector(".back-button");
          if (!backBtn) return;
          if (i === 0) {
            backBtn.disabled = true;
            backBtn.setAttribute("tabindex", "-1");
          } else {
            backBtn.disabled = false;
            backBtn.removeAttribute("tabindex");
          }
        });
      }

      // Step 1 form and next button
      const step1Form = document.querySelector(".step-1-form");
      const step1NextBtn = document.getElementById("nextBtn");

      // Step 2 form and next button
      const step2Form = document.querySelector(".step-2-form");
      const step2NextBtn = step2Form.querySelector('button[type="submit"]');

      // Step 3 form and signup button
      const step3Form = document.querySelector(".step-3-form");
      const step3SignupBtn = step3Form.querySelector('button.signup-btn');

      // Back buttons for each step (except step 1 disabled)
      const backButtons = document.querySelectorAll(".back-button");
      backButtons.forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          if (currentStep > 0) {
            showStep(currentStep - 1);
          }
        });
      });

      // Step 1 Next button submit handler
      step1NextBtn.addEventListener("click", function (e) {
        e.preventDefault();
        if (step1NextBtn.disabled) return;
        showStep(1);
      });

      // Step 2 Next button submit handler
      step2NextBtn.addEventListener("click", function (e) {
        e.preventDefault();
        const name = document.getElementById("name");
        const day = document.getElementById("day");
        const month = document.getElementById("month");
        const year = document.getElementById("year");
        const gender = document.querySelector("input[name='gender']:checked");

        if (!name.value || !day.value || !month.value || !year.value || !gender) {
          alert("Please fill out all fields.");
          return;
        }

        showStep(2);
      });

      // Step 3 Sign up button submit handler
      step3Form.addEventListener("submit", function (e) {
        e.preventDefault();
        alert("Sign up complete! Thank you.");
      });

      // Initialize
      showStep(0);

      // Attach toggle password event listener
      const togglePasswordBtn = document.getElementById("togglePasswordBtn");
      togglePasswordBtn.addEventListener("click", togglePasswordVisibility);
    })();
  </script>
</body>
</html>






</head>
<body>
  <div class="container" role="main">
    <div class="logo-container">
      <img
        alt="Spotify logo white circle on black background"
        src="https://storage.googleapis.com/a1aa/image/13697a89-49a5-41af-5b87-9e419f81128c.jpg"
        width="32"
        height="32"
      />
    </div>
    <div class="progress-bar-container" aria-hidden="true">
      <div class="progress-bar-fill"></div>
    </div>
    <form action="/public/index.php?action=signup-continue" method="POST" novalidate>
 
    <!-- Step 1 -->
    <div class="step step-1 active" aria-label="Step 1: Create a password" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button" disabled tabindex="-1">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 1 of 3</p>
        <h2 class="title">Create a password</h2>
      </div>
      <div class="step-1-form">
        <label for="password">Password</label>
        <div class="input-wrapper">
          <input
            id="password"
            type="password"
            aria-describedby="password-requirements"
            placeholder=""
            autocomplete="new-password"
            oninput="checkPassword(this.value)"
            required
          />
          <button
            id="togglePasswordBtn"
            class="toggle-password-btn"
            type="button"
            aria-label="Toggle password visibility"
            tabindex="-1"
          >
            <i id="togglePasswordIcon" class="fas fa-eye-slash"></i>
          </button>
        </div>
        <ul id="password-requirements" class="password-requirements" aria-label="Password requirements">
          <li id="req-letter">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            1 letter
          </li>
          <li id="req-number-special">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            1 number or special character (example: # ? ! &amp;)
          </li>
          <li id="req-characters">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            10 characters
          </li>
        </ul>
        <button id="nextBtn" type="button" disabled>Next</button>
  </div>
    </div>
  

    <!-- Step 2 -->
    <div class="step step-2" aria-label="Step 2: Personal information" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 2 of 3</p>
        <h2 class="title">Tell us about yourself</h2>
      </div>
      <div class="step step-2">
        <label for="name">Name</label>
        <p class="small-text">This name will appear on your profile</p>
        <input
          type="text"
          id="name"
          name="name"
          class="input-full"
          autocomplete="off"
          required
        />
        <label for="dob">Date of birth</label>
        <p class="gender-text" style="margin-top: 0; margin-bottom: 0.25rem; font-size: 0.625rem;">
          Why do we need your date of birth?
          <a href="#" style="color: #9ca3af; text-decoration: underline;">Learn more.</a>
        </p>
        <div class="dob-container">
          <input
            type="text"
            id="day"
            name="day"
            maxlength="2"
            placeholder="dd"
            class="dob-day"
            autocomplete="off"
            required
            pattern="\d{1,2}"
            inputmode="numeric"
          />
          <select id="month" name="month" class="dob-month" required>
            <option disabled selected value="">Month</option>
            <option>January</option>
            <option>February</option>
            <option>March</option>
            <option>April</option>
            <option>May</option>
            <option>June</option>
            <option>July</option>
            <option>August</option>
            <option>September</option>
            <option>October</option>
            <option>November</option>
            <option>December</option>
          </select>
          <input
            type="text"
            id="year"
            name="year"
            maxlength="4"
            placeholder="yyyy"
            class="dob-year"
            autocomplete="off"
            required
            pattern="\d{4}"
            inputmode="numeric"
          />
        </div>
        <label for="gender">Gender</label>
        <p class="gender-text">
          We use your gender to help personalize our content recommendations and ads for you.
        </p>
        <div class="radio-group" role="radiogroup" aria-labelledby="gender-label">
          <input type="radio" id="man" name="gender" value="man" required />
          <label for="man" style="color:#9ca3af;">Man</label>
          <input type="radio" id="woman" name="gender" value="woman" />
          <label for="woman" style="color:#9ca3af;">Woman</label>
          <input type="radio" id="nonbinary" name="gender" value="nonbinary" />
          <label for="nonbinary" style="color:#9ca3af;">Non-binary</label>
        </div>
        <div class="radio-group" style="margin-bottom: 1.5rem;">
          <input type="radio" id="prefer-not" name="gender" value="prefer-not" />
          <label for="prefer-not" style="color:#9ca3af;">Prefer not to say</label>
        </div>
        <button type="submit">Next</button>
      </div>
    </div>

    <!-- Step 3 -->
    <div class="step step-3" aria-label="Step 3: Preferences and Terms" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 3 of 3</p>
        <div class="title">Terms &amp; Conditions</div>
      </div>
      <div class="step step-3">
        <label>
          <input type="checkbox" checked />
          I would prefer not to receive marketing messages from Spotify
        </label>
        <label>
          <input type="checkbox" />
          Share my registration data with Spotify’s content providers for marketing purposes.
        </label>
        <p class="info-text">
          By clicking on sign-up, you agree to Spotify’s
          <a href="#">Terms and Conditions of Use</a>.
        </p>
        <p class="info-text">
          To learn more about how Spotify collects, uses, shares and protects your personal data, please see
          <a href="#">Spotify’s Privacy Policy</a>.
        </p>
        <button class="signup-btn" type="submit">Sign up</button>
  </div>
    </div>
  </div>
</form>
  <footer>
    <p>
      This site is protected by reCAPTCHA and the Google
      <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer">Privacy Policy</a> and
      <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer">Terms of Service</a> apply.
    </p>
  </footer>

  <script>
    // Existing Step 1 functions (unchanged)
    function checkPassword(value) {
      const letterLi = document.getElementById("req-letter");
      const numberSpecialLi = document.getElementById("req-number-special");
      const charactersLi = document.getElementById("req-characters");
      const nextBtn = document.getElementById("nextBtn");

      const hasLetter = /[a-zA-Z]/.test(value);
      const hasNumberSpecial = /[\d#?!&]/.test(value);
      const hasCharacters = value.length >= 10;

      if (hasLetter) {
        letterLi.classList.add("valid");
        letterLi.querySelector("i").classList.remove("fa-times-circle");
        letterLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        letterLi.classList.remove("valid");
        letterLi.querySelector("i").classList.remove("fa-check-circle");
        letterLi.querySelector("i").classList.add("fa-times-circle");
      }

      if (hasNumberSpecial) {
        numberSpecialLi.classList.add("valid");
        numberSpecialLi.querySelector("i").classList.remove("fa-times-circle");
        numberSpecialLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        numberSpecialLi.classList.remove("valid");
        numberSpecialLi.querySelector("i").classList.remove("fa-check-circle");
        numberSpecialLi.querySelector("i").classList.add("fa-times-circle");
      }

      if (hasCharacters) {
        charactersLi.classList.add("valid");
        charactersLi.querySelector("i").classList.remove("fa-times-circle");
        charactersLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        charactersLi.classList.remove("valid");
        charactersLi.querySelector("i").classList.remove("fa-check-circle");
        charactersLi.querySelector("i").classList.add("fa-times-circle");
      }

      nextBtn.disabled = !(hasLetter && hasNumberSpecial && hasCharacters);
    }

    // Fix toggle password visibility to preserve input value and cursor position without re-render issues
    function togglePasswordVisibility() {
      const passwordInput = document.getElementById("password");
      const toggleIcon = document.getElementById("togglePasswordIcon");
      const isPassword = passwordInput.type === "password";

      // Save cursor position and scroll
      const selectionStart = passwordInput.selectionStart;
      const selectionEnd = passwordInput.selectionEnd;
      const scrollTop = passwordInput.scrollTop;

      // Change input type without losing value or cursor position
      try {
        passwordInput.type = isPassword ? "text" : "password";
      } catch (e) {
        // Some browsers may throw if changing type dynamically, fallback:
        const newInput = passwordInput.cloneNode(true);
        newInput.type = isPassword ? "text" : "password";
        passwordInput.parentNode.replaceChild(newInput, passwordInput);
      }

      // Restore cursor position and scroll
      passwordInput.setSelectionRange(selectionStart, selectionEnd);
      passwordInput.scrollTop = scrollTop;
      passwordInput.focus();

      // Toggle icon
      if (isPassword) {
        toggleIcon.classList.remove("fa-eye-slash");
        toggleIcon.classList.add("fa-eye");
      } else {
        toggleIcon.classList.remove("fa-eye");
        toggleIcon.classList.add("fa-eye-slash");
      }
    }

    // Integration logic for multi-step form
    (function () {
      const steps = document.querySelectorAll(".step");
      const progressBarFill = document.querySelector(".progress-bar-fill");
      let currentStep = 0; // zero-based index

      // Update progress bar width based on step index
      function updateProgressBar(stepIndex) {
        let widthPercent = "20%";
        if (stepIndex === 0) widthPercent = "20%";
        else if (stepIndex === 1) widthPercent = "40%";
        else if (stepIndex === 2) widthPercent = "100%";
        progressBarFill.style.width = widthPercent;
      }

      // Show the step at index, hide others
      function showStep(index) {
        steps.forEach((step, i) => {
          if (i === index) {
            step.classList.add("active");
            step.setAttribute("aria-hidden", "false");
          } else {
            step.classList.remove("active");
            step.setAttribute("aria-hidden", "true");
          }
        });
        currentStep = index;
        updateProgressBar(index);
        updateHeaderBackButton();
      }

      // Enable or disable back button on step 1 (disabled)
      function updateHeaderBackButton() {
        steps.forEach((step, i) => {
          const backBtn = step.querySelector(".back-button");
          if (!backBtn) return;
          if (i === 0) {
            backBtn.disabled = true;
            backBtn.setAttribute("tabindex", "-1");
          } else {
            backBtn.disabled = false;
            backBtn.removeAttribute("tabindex");
          }
        });
      }

      // Step 1 form and next button
      const step1Form = document.querySelector(".step-1-form");
      const step1NextBtn = document.getElementById("nextBtn");

      // Step 2 form and next button
      const step2Form = document.querySelector(".step-2-form");
      const step2NextBtn = step2Form.querySelector('button[type="submit"]');

      // Step 3 form and signup button
      const step3Form = document.querySelector(".step-3-form");
      const step3SignupBtn = step3Form.querySelector('button.signup-btn');


        

      // Back buttons for each step (except step 1 disabled)
      const backButtons = document.querySelectorAll(".back-button");
      backButtons.forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          if (currentStep > 0) {
            showStep(currentStep - 1);
          }
        });
      });

      // Step 1 Next button submit handler
      step1Form.addEventListener("click", function (e) {
        e.preventDefault();
        // Only proceed if button enabled (password valid)
        if (step1NextBtn.disabled) return;
        showStep(1);
      });

      // Step 2 Next button submit handler
      step2NextBtn.addEventListener("click", function (e) {
  e.preventDefault();
  const name = document.getElementById("name");
  const day = document.getElementById("day");
  const month = document.getElementById("month");
  const year = document.getElementById("year");
  const gender = document.querySelector("input[name='gender']:checked");

  if (!name.value || !day.value || !month.value || !year.value || !gender) {
    alert("Please fill out all fields.");
    return;
  }

  showStep(2);
});

      // Step 3 Sign up button submit handler
      step3Form.addEventListener("submit", function (e) {
        e.preventDefault();
        // No extra validation required, just simulate submission
        alert("Sign up complete! Thank you.");
      });

      // Initialize
      showStep(0);

      // Attach toggle password event listener
      const togglePasswordBtn = document.getElementById("togglePasswordBtn");
      togglePasswordBtn.addEventListener("click", togglePasswordVisibility);
    })();
  </script>
</body>
</html>




















finall
<?php
//require_once '../includes/session.php';
//require_once '../controllers/AuthController.php';

function debugFormPost() {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        echo "<pre>";
        echo "✅ Form was POSTED\n\n";
        print_r($_POST);
        echo "\nFILES:\n";
        print_r($_FILES);
        echo "</pre>";
    } else {
        echo "<pre>⛔ Form was NOT posted (Request Method: {$_SERVER['REQUEST_METHOD']})</pre>";
    }
}


if (isset($_GET['action']) && $_GET['action'] === 'signup-continue') {
   $email = $_SESSION['signup_email'] ?? '';
  debugFormPost();

    // your form processing code here...
}

 



?> 

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <title>Spotify Multi-Step Signup</title>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    rel="stylesheet"
  />
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Spotify+Circular&display=swap");
    /* Common styles for all steps */
    body {
      font-family: "Spotify Circular", system-ui, -apple-system,
        BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,
        "Open Sans", "Helvetica Neue", sans-serif;
      background-color: #121212;
      color: white;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 384px;
      width: 100%;
      margin: 3rem auto 0;
      padding: 0 1.5rem;
      box-sizing: border-box;
      position: relative;
    }
    .logo-container {
      display: flex;
      justify-content: center;
      margin-bottom: 1.5rem;
    }
    .logo-container img {
      width: 32px;
      height: 32px;
      object-fit: contain;
    }
    .progress-bar-container {
      position: relative;
      height: 2px;
      margin-bottom: 1.5rem;
      border-radius: 9999px;
      background-color: #4b5563; /* gray-600 */
      overflow: hidden;
    }
    .progress-bar-fill {
      position: absolute;
      top: 0;
      left: 0;
      height: 2px;
      background-color: #22c55e; /* green-500 */
      border-radius: 9999px;
      width: 20%;
      pointer-events: none;
      transition: width 0.3s ease;
    }
    .header {
      position: relative;
      margin-bottom: 1.5rem;
      padding-left: 2rem;
    }
    .back-button {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      color: #9ca3af; /* gray-400 */
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1rem;
      transition: color 0.2s;
      z-index: 10;
    }
    .back-button:hover {
      color: white;
    }
    .back-button[disabled] {
      cursor: default;
      color: #4b5563;
      pointer-events: none;
    }
    .step-text {
      margin: 0 0 0.25rem 0;
      font-size: 0.875rem;
      font-weight: 600;
      color: #9ca3af; /* gray-400 */
    }
    .title {
      margin: 0;
      font-weight: 700;
      font-size: 1rem;
      color: white;
    }
    /* Step containers */
    .step {
      display: none;
    }
    .step.active {
      display: block;
    }
    /* Step 1 styles */
    form.step-1-form label {
      display: block;
      font-size: 0.75rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    .input-wrapper {
      position: relative;
      margin-bottom: 1rem;
    }
    input[type="password"],
    input[type="text"] {
      width: 100%;
      background-color: #121212;
      border: 1px solid #374151; /* gray-700 */
      border-radius: 0.375rem;
      padding: 0.5rem 2.5rem 0.5rem 0.75rem;
      font-size: 0.875rem;
      color: white;
      box-sizing: border-box;
      font-family: inherit;
      letter-spacing: normal;
    }
    input::placeholder {
      color: #6b7280; /* gray-500 */
    }
    input:focus {
      outline: none;
      border-color: #22c55e; /* green-600 */
    }
    .toggle-password-btn {
      position: absolute;
      right: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #6b7280; /* gray-500 */
      cursor: pointer;
      font-size: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: color 0.2s;
      padding: 0;
      line-height: 1;
    }
    .toggle-password-btn:hover {
      color: #9ca3af; /* gray-400 */
    }
    ul.password-requirements {
      list-style: none;
      padding: 0;
      margin: 0 0 1.5rem 0;
      font-size: 0.75rem;
      color: #9ca3af; /* gray-400 */
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
      max-width: 384px;
      width: 100%;
      box-sizing: border-box;
      padding: 0 1.5rem;
    }
    ul.password-requirements li {
      display: flex;
      align-items: center;
    }
    ul.password-requirements li i {
      color: #9ca3af; /* default gray-400 */
      margin-right: 0.5rem;
      font-size: 10px;
      flex-shrink: 0;
      transition: color 0.2s;
    }
    ul.password-requirements li.valid i {
      color: #22c55e; /* green-500 */
    }
    button#nextBtn {
      width: 100%;
      background-color: #22c55e;
      color: black;
      font-weight: 700;
      font-size: 0.75rem;
      border-radius: 9999px;
      padding: 0.5rem 0;
      border: none;
      cursor: pointer;
      transition: background-color 0.2s;
      user-select: none;
    }
    button#nextBtn:hover:not(:disabled) {
      background-color: #16a34a;
    }
    button#nextBtn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    /* Step 2 styles */
    form.step-2-form label {
      display: block;
      font-size: 0.75rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    .small-text {
      color: #9ca3af;
      font-size: 0.625rem;
      margin-top: 0;
      margin-bottom: 0.5rem;
    }
    .input-full {
      width: 100%;
      background-color: #121212;
      border: 1px solid #374151; /* gray-700 */
      border-radius: 0.375rem;
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
      color: white;
      box-sizing: border-box;
      margin-bottom: 1rem;
    }
    .dob-container {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    .dob-day,
    .dob-month,
    .dob-year {
      background-color: #121212;
      border: 1px solid #374151;
      border-radius: 0.375rem;
      color: white;
      font-size: 0.875rem;
      padding: 0.5rem 0.75rem;
      box-sizing: border-box;
      outline: none;
    }
    .dob-day {
      width: 56px;
    }
    .dob-month {
      width: 112px;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-image:
        url("data:image/svg+xml;charset=UTF-8,%3csvg fill='white' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1rem;
      cursor: pointer;
    }
    .dob-year {
      width: 80px;
    }
    .dob-day:focus,
    .dob-month:focus,
    .dob-year:focus {
      border-color: #22c55e;
    }
    .gender-container {
      margin-bottom: 0.5rem;
    }
    .gender-text {
      color: #9ca3af;
      font-size: 0.625rem;
      margin-bottom: 0.5rem;
    }
    .radio-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 0.5rem;
      font-size: 0.75rem;
    }
    .radio-group label {
      font-weight: 400;
      cursor: pointer;
    }
    input[type="radio"] {
      width: 16px;
      height: 16px;
      accent-color: #22c55e;
      cursor: pointer;
      background-color: transparent;
      border: 1px solid #4b5563;
      border-radius: 50%;
      margin: 0;
    }
    input[type="radio"] + label {
      color: white;
    }
    form.step-2-form button[type="submit"] {
      width: 100%;
      background-color: #22c55e;
      color: black;
      font-weight: 700;
      font-size: 0.75rem;
      border-radius: 9999px;
      padding: 0.75rem 0;
      border: none;
      cursor: pointer;
      transition: background-color 0.2s;
      user-select: none;
    }
    form.step-2-form button[type="submit"]:hover {
      background-color: #16a34a;
    }
    /* Step 3 styles */
    /* Removed the border-green line as requested */
    .step-3 .header {
      position: relative;
      padding-left: 2rem;
      margin-bottom: 1rem;
    }
    .step-3 .back-button {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #9ca3af;
      font-size: 1.25rem;
      cursor: pointer;
      transition: color 0.2s;
      z-index: 10;
    }
    .step-3 .back-button:hover {
      color: white;
    }
    .step-3 .step-text {
      font-size: 0.875rem;
      color: #9ca3af;
      margin: 0 0 0.25rem 0;
    }
    .step-3 .title {
      font-weight: 700;
      font-size: 1rem;
      margin: 0;
    }
    .step-3 form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .step-3 label {
      display: flex;
      align-items: flex-start;
      gap: 0.75rem;
      background-color: #282828;
      padding: 0.75rem;
      border-radius: 0.375rem;
      cursor: pointer;
      font-size: 0.75rem;
      line-height: 1.2;
      max-width: 260px;
      color: #d1d1d1;
    }
    .step-3 label input[type="checkbox"] {
      margin-top: 0.25rem;
      width: 1rem;
      height: 1rem;
      accent-color: #1db954;
      background-color: #282828;
      border: 1px solid #4b4b4b;
      border-radius: 0.25rem;
      cursor: pointer;
    }
    .step-3 label input[type="checkbox"]:focus {
      outline: 2px solid #1db954;
      outline-offset: 2px;
    }
    .step-3 p.info-text {
      font-size: 10px;
      color: #9ca3af;
      max-width: 260px;
      line-height: 1.3;
      margin-top: 1.5rem;
    }
    .step-3 p.info-text a {
      color: #1db954;
      text-decoration: underline;
    }
    .step-3 p.info-text a:hover {
      text-decoration: none;
    }
    .signup-btn {
      margin-top: 1.5rem;
      width: 260px;
      background-color: #1db954;
      color: black;
      font-weight: 700;
      font-size: 0.875rem;
      border: none;
      border-radius: 9999px;
      padding: 0.5rem 0;
      cursor: pointer;
      transition: background-color 0.2s;
      user-select: none;
    }
    .signup-btn:hover {
      background-color: #1ed760;
    }
    /* Footer common */
    footer {
      margin-top: auto;
      text-align: center;
      font-size: 9px;
      color: #6b7280; /* gray-500 */
      padding: 1rem 1.5rem;
      max-width: 384px;
      width: 100%;
      box-sizing: border-box;
    }
    footer a {
      color: #6b7280;
      text-decoration: underline;
    }
    footer a:hover {
      color: white;
    }
    /* Responsive */
    @media (max-width: 400px) {
      .container {
        margin: 2rem 1rem 0 1rem;
      }
      .step-3 {
        padding: 0 1rem;
      }
      .step-3 label {
        max-width: 100%;
      }
      .step-3 p.info-text {
        max-width: 100%;
      }
      .signup-btn {
        width: 100%;
      }
    }
  </style>

</head>
<body>
  <div class="container" role="main">
    <div class="logo-container">
      <img
        alt="Spotify logo white circle on black background"
        src="https://storage.googleapis.com/a1aa/image/13697a89-49a5-41af-5b87-9e419f81128c.jpg"
        width="32"
        height="32"
      />
    </div>
    <div class="progress-bar-container" aria-hidden="true">
      <div class="progress-bar-fill"></div>
    </div>
    <form action="/public/index.php?action=signup-continue" method="POST" novalidate>
 
    <!-- Step 1 -->
    <div class="step step-1 active" aria-label="Step 1: Create a password" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button" disabled tabindex="-1">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 1 of 3</p>
        <h2 class="title">Create a password</h2>
      </div>
      <div class="step-1-form">

      <input type="hidden" name="email" value="<?= htmlspecialchars($email) ?>">

        <label for="password">Password</label>
        <div class="input-wrapper">
          <input
            id="password"
            name="password"
            type="password"
            aria-describedby="password-requirements"
            placeholder=""
            autocomplete="new-password"
            oninput="checkPassword(this.value)"
            required
          />
          <button
            id="togglePasswordBtn"
            class="toggle-password-btn"
            type="button"
            aria-label="Toggle password visibility"
            tabindex="-1"
          >
            <i id="togglePasswordIcon" class="fas fa-eye-slash"></i>
          </button>
        </div>
        <ul id="password-requirements" class="password-requirements" aria-label="Password requirements">
          <li id="req-letter">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            1 letter
          </li>
          <li id="req-number-special">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            1 number or special character (example: # ? ! &amp;)
          </li>
          <li id="req-characters">
            <i class="fas fa-times-circle" aria-hidden="true"></i>
            10 characters
          </li>
        </ul>
        <button id="nextBtn" type="button" disabled>Next</button>
  </div>
    </div>
  

    <!-- Step 2 -->
    <div class="step step-2" aria-label="Step 2: Personal information" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 2 of 3</p>
        <h2 class="title">Tell us about yourself</h2>
      </div>
      <div class="step-2-form">
        <label for="name">Name</label>
        <p class="small-text">This name will appear on your profile</p>
        <input
          type="text"
          id="name"
          name="name"
          class="input-full"
          autocomplete="off"
          required
        />
        <label for="dob">Date of birth</label>
        <p class="gender-text" style="margin-top: 0; margin-bottom: 0.25rem; font-size: 0.625rem;">
          Why do we need your date of birth?
          <a href="#" style="color: #9ca3af; text-decoration: underline;">Learn more.</a>
        </p>
        <div class="dob-container">
          <input
            type="text"
            id="day"
            name="day"
            maxlength="2"
            placeholder="dd"
            class="dob-day"
            autocomplete="off"
            required
            pattern="\d{1,2}"
            inputmode="numeric"
          />
          <select id="month" name="month" class="dob-month" required>
            <option disabled selected value="">Month</option>
            <option>January</option>
            <option>February</option>
            <option>March</option>
            <option>April</option>
            <option>May</option>
            <option>June</option>
            <option>July</option>
            <option>August</option>
            <option>September</option>
            <option>October</option>
            <option>November</option>
            <option>December</option>
          </select>
          <input
            type="text"
            id="year"
            name="year"
            maxlength="4"
            placeholder="yyyy"
            class="dob-year"
            autocomplete="off"
            required
            pattern="\d{4}"
            inputmode="numeric"
          />
        </div>
        <label for="gender">Gender</label>
        <p class="gender-text">
          We use your gender to help personalize our content recommendations and ads for you.
        </p>
        <div class="radio-group" role="radiogroup" aria-labelledby="gender-label">
          <input type="radio" id="man" name="gender" value="man" required />
          <label for="man" style="color:#9ca3af;">Man</label>
          <input type="radio" id="woman" name="gender" value="woman" />
          <label for="woman" style="color:#9ca3af;">Woman</label>
          <input type="radio" id="nonbinary" name="gender" value="nonbinary" />
          <label for="nonbinary" style="color:#9ca3af;">Non-binary</label>
        </div>
        <div class="radio-group" style="margin-bottom: 1.5rem;">
          <input type="radio" id="prefer-not" name="gender" value="prefer-not" />
          <label for="prefer-not" style="color:#9ca3af;">Prefer not to say</label>
        </div>
        <button type="submit" class="nextBtnStep2">Next</button>
      </div>
    </div>

    <!-- Step 3 -->
    <div class="step step-3" aria-label="Step 3: Preferences and Terms" aria-live="polite">
      <div class="header">
        <button aria-label="Back" class="back-button" type="button">
          <i class="fas fa-chevron-left"></i>
        </button>
        <p class="step-text">Step 3 of 3</p>
        <div class="title">Terms &amp; Conditions</div>
      </div>
      <div class="step-3-form">
        <label>
          <input type="checkbox" checked />
          I would prefer not to receive marketing messages from Spotify
        </label>
        <label>
          <input type="checkbox" />
          Share my registration data with Spotify’s content providers for marketing purposes.
        </label>
        <p class="info-text">
          By clicking on sign-up, you agree to Spotify’s
          <a href="#">Terms and Conditions of Use</a>.
        </p>
        <p class="info-text">
          To learn more about how Spotify collects, uses, shares and protects your personal data, please see
          <a href="#">Spotify’s Privacy Policy</a>.
        </p>
        <button class="signup-btn" type="submit">Sign up</button>
  </div>
    </div>
  </div>
</form>
  <footer>
    <p>
      This site is protected by reCAPTCHA and the Google
      <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer">Privacy Policy</a> and
      <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer">Terms of Service</a> apply.
    </p>
  </footer>

  <script>
    // Existing Step 1 functions (unchanged)
    function checkPassword(value) {
      const letterLi = document.getElementById("req-letter");
      const numberSpecialLi = document.getElementById("req-number-special");
      const charactersLi = document.getElementById("req-characters");
      const nextBtn = document.getElementById("nextBtn");

      const hasLetter = /[a-zA-Z]/.test(value);
      const hasNumberSpecial = /[\d#?!&]/.test(value);
      const hasCharacters = value.length >= 10;

      if (hasLetter) {
        letterLi.classList.add("valid");
        letterLi.querySelector("i").classList.remove("fa-times-circle");
        letterLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        letterLi.classList.remove("valid");
        letterLi.querySelector("i").classList.remove("fa-check-circle");
        letterLi.querySelector("i").classList.add("fa-times-circle");
      }

      if (hasNumberSpecial) {
        numberSpecialLi.classList.add("valid");
        numberSpecialLi.querySelector("i").classList.remove("fa-times-circle");
        numberSpecialLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        numberSpecialLi.classList.remove("valid");
        numberSpecialLi.querySelector("i").classList.remove("fa-check-circle");
        numberSpecialLi.querySelector("i").classList.add("fa-times-circle");
      }

      if (hasCharacters) {
        charactersLi.classList.add("valid");
        charactersLi.querySelector("i").classList.remove("fa-times-circle");
        charactersLi.querySelector("i").classList.add("fa-check-circle");
      } else {
        charactersLi.classList.remove("valid");
        charactersLi.querySelector("i").classList.remove("fa-check-circle");
        charactersLi.querySelector("i").classList.add("fa-times-circle");
      }

      nextBtn.disabled = !(hasLetter && hasNumberSpecial && hasCharacters);
    }

    // Fix toggle password visibility to preserve input value and cursor position without re-render issues
    function togglePasswordVisibility(event) {
      event.stopPropagation();
      const passwordInput = document.getElementById("password");
      const toggleIcon = document.getElementById("togglePasswordIcon");
      const isPassword = passwordInput.type === "password";

      // Save cursor position and scroll
      const selectionStart = passwordInput.selectionStart;
      const selectionEnd = passwordInput.selectionEnd;
      const scrollTop = passwordInput.scrollTop;

      // Change input type without losing value or cursor position
      try {
        passwordInput.type = isPassword ? "text" : "password";
      } catch (e) {
        // Some browsers may throw if changing type dynamically, fallback:
        const newInput = passwordInput.cloneNode(true);
        newInput.type = isPassword ? "text" : "password";
        passwordInput.parentNode.replaceChild(newInput, passwordInput);
      }

      // Restore cursor position and scroll
      passwordInput.setSelectionRange(selectionStart, selectionEnd);
      passwordInput.scrollTop = scrollTop;
      passwordInput.focus();

      // Toggle icon
      if (isPassword) {
        toggleIcon.classList.remove("fa-eye-slash");
        toggleIcon.classList.add("fa-eye");
      } else {
        toggleIcon.classList.remove("fa-eye");
        toggleIcon.classList.add("fa-eye-slash");
      }
    }

    // Integration logic for multi-step form
    (function () {
      const steps = document.querySelectorAll(".step");
      const progressBarFill = document.querySelector(".progress-bar-fill");
      let currentStep = 0; // zero-based index

      // Update progress bar width based on step index
      function updateProgressBar(stepIndex) {
        let widthPercent = "20%";
        if (stepIndex === 0) widthPercent = "20%";
        else if (stepIndex === 1) widthPercent = "40%";
        else if (stepIndex === 2) widthPercent = "100%";
        progressBarFill.style.width = widthPercent;
      }

      // Show the step at index, hide others
      function showStep(index) {
        steps.forEach((step, i) => {
          if (i === index) {
            step.classList.add("active");
            step.setAttribute("aria-hidden", "false");
          } else {
            step.classList.remove("active");
            step.setAttribute("aria-hidden", "true");
          }
        });
        currentStep = index;
        updateProgressBar(index);
        updateHeaderBackButton();
      }

      // Enable or disable back button on step 1 (disabled)
      function updateHeaderBackButton() {
        steps.forEach((step, i) => {
          const backBtn = step.querySelector(".back-button");
          if (!backBtn) return;
          if (i === 0) {
            backBtn.disabled = true;
            backBtn.setAttribute("tabindex", "-1");
          } else {
            backBtn.disabled = false;
            backBtn.removeAttribute("tabindex");
          }
        });
      }

      // Step 1 form and next button
      const step1Form = document.querySelector(".step-1-form");
      const step1NextBtn = document.getElementById("nextBtn");

      // Step 2 form and next button
      const step2Form = document.querySelector(".step-2-form");
      const step2NextBtn = step2Form.querySelector('button[type="submit"]');

      // Step 3 form and signup button
      const step3Form = document.querySelector(".step-3-form");
      const step3SignupBtn = step3Form.querySelector('button.signup-btn');

      // Back buttons for each step (except step 1 disabled)
      const backButtons = document.querySelectorAll(".back-button");
      backButtons.forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          if (currentStep > 0) {
            showStep(currentStep - 1);
          }
        });
      });

      // Step 1 Next button submit handler
      step1NextBtn.addEventListener("click", function (e) {
        e.preventDefault();
        if (step1NextBtn.disabled) return;
        showStep(1);
      });

      // Step 2 Next button submit handler
      step2NextBtn.addEventListener("click", function (e) {
        e.preventDefault();
        const name = document.getElementById("name");
        const day = document.getElementById("day");
        const month = document.getElementById("month");
        const year = document.getElementById("year");
        const gender = document.querySelector("input[name='gender']:checked");

        if (!name.value || !day.value || !month.value || !year.value || !gender) {
          alert("Please fill out all fields.");
          return;
        }

        showStep(2);
      });

      // Step 3 Sign up button submit handler
      step3Form.addEventListener("submit", function (e) {
        e.preventDefault();
        alert("Sign up complete! Thank you.");
      });

      // Initialize
      showStep(0);

      // Attach toggle password event listener
      const togglePasswordBtn = document.getElementById("togglePasswordBtn");
      togglePasswordBtn.addEventListener("click", togglePasswordVisibility);
    })();
  </script>
</body>
</html>



































look at this .its my login page 
 <form action="/public/index.php?action=login" method="POST" novalidate>
      <label for="login-email" id="login-label">Email or username</label>
      <input
        id="login-email"
        type="text"
        placeholder="Email or username"
        autocomplete="username"
        aria-required="true"
        name="email"
        inputmode="email"
      />

      <label for="login-password">Password</label>
      <div class="password-wrapper">
        <input
          id="login-password"
          type="password"
          placeholder="Password"
          autocomplete="current-password"
          aria-required="true"
        />
        <span class="toggle-password" role="button" tabindex="0" aria-label="Toggle password visibility">
          <i class="fas fa-eye"></i>
        </span>
      </div>

      <button type="submit" class="btn-continue">Continue</button>
    </form> 
and look at this
 <form action="?action=signup" method="POST" novalidate>
           <input type="hidden" name="signup-submit" value="1" />
          <label for="signup-email" id="signup-label">Email address</label>
          <input
            id="signup-email"
            name="email"
            placeholder="name@domain.com"
            required
            type="email"
            aria-required="true"
            inputmode="email"


and this is my index page
switch ($action) {
    case 'login':
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['login-submit'])) {
            $authController->login($_POST['email'], $_POST['password']);
        } else {
            redirectIfAuthenticated(); // Optional: block access if already logged in
            require_once '../pages/login_signup.php';
        }
        break;


    case 'signup':
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['signup-submit'])) {
        // Handle first step: email validation
        $authController->handleSignup();
    } else {
        redirectIfAuthenticated();
        require_once '../pages/login_signup.php';
    }
    break;

case 'signup-continue':
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['register-submit'])) {
        // Handle final registration step here
        $username = $_POST['username'] ?? '';
        $password = $_POST['password'] ?? '';
        $email = $_SESSION['signup_email'] ?? '';

        if ($password !== $confirmPassword) {
            $_SESSION['error'] = "Passwords do not match.";
            header('Location: /index.php?action=signup-continue'); // better redirect to this action
            exit;
        }

        $authController->register($username, $email, $password);
    } else {
        redirectIfAuthenticated();
        require_once '../pages/signup-continue.php';
    }
    break;


    case 'dashboard':
        requireAuth();
        require_once '../pages/dashboard.php';
        break;

    case 'logout':
        $authController->logout();
        break;

    default:
        echo "404 Page not found";
}
?>
and this is my fake db
<?php

define('DB_HOST', 'fake_host');
define('DB_NAME', 'fake_db');
define('DB_USER', 'fake_user');
define('DB_PASS', 'fake_pass');

class Database {
    private static $connection = null;

    public static function getConnection() {
        if (self::$connection === null) {
            // Fake config vars
            $host = DB_HOST;
            $dbname = DB_NAME;
            $user = DB_USER;
            $pass = DB_PASS;

            // This logs to PHP error log, not to browser
            error_log("Simulating DB connection to $host / $dbname as $user");

            self::$connection = new FakePDO();
        }

        return self::$connection;
    }
}

class FakePDO {
    public function prepare($query) {
        return new FakeStatement($query);
    }

    public function lastInsertId() {
        return 2; // simulate a new user ID
    }
}

class FakeStatement {
    private $query;
    private $params = [];
    private $result = [];

    private static $fakeUsers = [
        [
            'id' => 1,
            'username' => 'TestUser',
            'email' => 'test@example.com',
            'password' => '$2y$10$ABCDEF1234567890hashedpassword' // fake hash
        ]
    ];

    public function __construct($query) {
        $this->query = $query;
    }

    public function bindParam($param, &$value) {
        $this->params[$param] = $value;
    }

    public function execute($values = null) {
        $email = $values[':email'] ?? $this->params[':email'] ?? $values[0] ?? null;

        if (stripos($this->query, 'SELECT') !== false) {
            $this->result = array_filter(self::$fakeUsers, fn($user) => $user['email'] === $email);
        }

        if (stripos($this->query, 'INSERT') !== false) {
            $newUser = [
                'id' => 2,
                'username' => $this->params[':username'] ?? 'NewUser',
                'email' => $this->params[':email'] ?? 'new@example.com',
                'password' => $this->params[':password'] ?? ''
            ];
            self::$fakeUsers[] = $newUser;
            $this->result = [$newUser];
        }
    }

    public function fetch($mode = null) {
        return $this->result ? reset($this->result) : false;
    }

    public function rowCount() {
        return count($this->result);
    }
}
?> 
this is my seesions php
<?php
session_start();

// Redirect to login if not logged in
function requireAuth() {
    if (!isset($_SESSION['user_id'])) {
        header("Location: /public/index.php?page=login_signup");
        exit();
    }
}

// Redirect to dashboard if already logged in
function redirectIfAuthenticated() {
    if (isset($_SESSION['user_id'])) {
        header("Location: /public/index.php?page=dashboard");
        exit();
    }
}











how am i going to name the things to retrieve the logins and check 